In thrift 0.11.0 TLSv1_x only works with the same protocol. This patch makes TLSv1_x work
with TLSv1_x or higher.

diff --git a/lib/cpp/src/thrift/transport/TSSLSocket.cpp b/lib/cpp/src/thrift/transport/TSSLSocket.cpp
index 3f0e28e..ee995ad 100644
--- a/lib/cpp/src/thrift/transport/TSSLSocket.cpp
+++ b/lib/cpp/src/thrift/transport/TSSLSocket.cpp
@@ -164,22 +164,21 @@ static char uppercase(char c);
 
 // SSLContext implementation
 SSLContext::SSLContext(const SSLProtocol& protocol) {
-  if (protocol == SSLTLS) {
-    ctx_ = SSL_CTX_new(SSLv23_method());
-#ifndef OPENSSL_NO_SSL3
-  } else if (protocol == SSLv3) {
-    ctx_ = SSL_CTX_new(SSLv3_method());
-#endif
-  } else if (protocol == TLSv1_0) {
-    ctx_ = SSL_CTX_new(TLSv1_method());
-  } else if (protocol == TLSv1_1) {
-    ctx_ = SSL_CTX_new(TLSv1_1_method());
-  } else if (protocol == TLSv1_2) {
-    ctx_ = SSL_CTX_new(TLSv1_2_method());
-  } else {
-    /// UNKNOWN PROTOCOL!
-    throw TSSLException("SSL_CTX_new: Unknown protocol");
+  // Disable horribly insecure SSLv2 and SSLv3 protocols but allow a handshake
+  // with older clients so they get a graceful denial.
+  int options = SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3;
+  switch (protocol) {
+  case TLSv1_2:
+    options |= SSL_OP_NO_TLSv1_1;
+  case TLSv1_1:
+    options |= SSL_OP_NO_TLSv1;
+  case TLSv1_0:
+    break;
+  default:
+    throw TSSLException(std::string("SSL_CTX_new: Unknown protocol: ")
+        + std::to_string(protocol));
   }
+  ctx_ = SSL_CTX_new(SSLv23_method());
 
   if (ctx_ == nullptr) {
     string errors;
@@ -188,11 +187,10 @@ SSLContext::SSLContext(const SSLProtocol& protocol) {
   }
   SSL_CTX_set_mode(ctx_, SSL_MODE_AUTO_RETRY);
 
-  // Disable horribly insecure SSLv2 and SSLv3 protocols but allow a handshake
-  // with older clients so they get a graceful denial.
-  if (protocol == SSLTLS) {
-      SSL_CTX_set_options(ctx_, SSL_OP_NO_SSLv2);
-      SSL_CTX_set_options(ctx_, SSL_OP_NO_SSLv3);   // THRIFT-3164
+  if ((SSL_CTX_set_options(ctx_, options) & options) != options) {
+    string errors;
+    buildErrors(errors);
+    throw TSSLException("SSL_CTX_set_options: " + errors);
   }
 }
 
